스프링 MVC - 기본기능
    프로젝트 생성
        WAR가 배치에 적합, 기능이 더 구현되어 있다.

    로깅 간단힌 알아보기
        SLF4J는 인터페이스
        그걸 구현한 것중 하나가 Logback이다. (가장 대중적)

        @RestController는??
        기존의 @Controller는 그 클래스 안의 메서드들이 스트링을 반환 하면 뷰 이름으로 인식되어서 뷰를찾고 뷰가 렌더링 된다.
        @RestController는 (RestAPI의 그 Rest이다.) 문자를 반환하면 그 스트링이 반환이 바로 되버린다.
        그래서 http 메세지 바디에 데이터를 넣어버리는것

        운영서버에 print메서드 찍으면 안된다 로그가 무분별하게 남기때문에 로그를 사용하면 내가 원하는 수준까지 확인할 수 있다.
        원하는 수준이라는것은 로그 레벨별로 설정해서 출력결과 확인 가능

        개발 서버는 debug
        운영 서버는 info
        default는 info

        private final Logger log = LoggerFactory.getLogger(LogTestController.class);
        가 너무 길다면 클래스단에다가 @Slf4j를 넣어주면 된다.

        로그 레벨에 따라 개발 서버와 운영 서버 로그를 설정으로 조절할 수 있다.
        println은 다 콘솔에 남는다 하지만 log는 파일에도 남길 수 있다. 네트워크로 로그 전송도 가능

        성능최적화! print문보다 좋다. 실무에서는 꼭 로그사용할것

    요청 매핑
        요청이 왔을떄 어떤 컨트롤러가 호출이 되어야하는지 매핑하는것
        단순히 url 뿐만 아니라 여러가지 요소를 가지고 매핑한다. 어떤 요소???

        url은 배열로 제공되어서 여러개의 url을 넣어도 괜찮다.

        스프링에서는 url마지막에 / 가 들어온것도 같이 매핑을 해준다.

        메서드를 정의해주지 않으면 어떤 api가 들어와도 응답한다.

        api 오류가 나면 json style로 보내준다.

        최근 http api는 리소스 경로에 식별자를 넣는 스타일을 선호한다. ( {} 를사용 )

    요청 매핑 - API 예시
        api를 만들어보자 (데이터가 넘어가는 부분 생략하고 URL 매핑만)
        @RequestMapping을 클래스별 메서드별로 작성하고 조합하는것을 자주 활용한다. 사람이 보기에 편해서

    HTTP 요청 - 기본, 헤더 조회
        HTTP 요청에서 데이터는 어떻게 넘어가나
        HTTP 헤더 정보를 조회하는 방법을 익히자

        locale은 우선순위가 가장 높은걸로 우리는 당연히 한국어, localeResolver가 있어서 다른방식으로 확장도 가능 잘 안건드린다.
        MultiValueMap은 하나의 키에 여러가지 값을 받을 수 있다. 같은 헤더에 같은 값들이 들어올 수도 있다.
        CookieValue는 특정 쿠키를 조회

    HTTP 요청 파라미터 - 쿼리 파라미터, HTML Form
        쿼리파라미터, HTML Form에서 데이터를 어떻게 처리하는지 확인해보자

        GET 쿼리 파라미터 전송 방식이나 POST HTML Form전송 방식이든 둘다 형식이 같아서 구분없이 조회할 수 있다 이것을 간단히
        요청 파라미터 ( request parameter ) 조회라고 한다.

        ★스프링으로 요청파라미터 조회하는방법!

    HTTP 요청 파라미터 - @RequestParam
        컨트롤러에 받는 파라미터에 붙일수 있는 여러가지 기능들

    HTTP 요청 파라미터 - @ModelAttribute
        HelloData 객체를 생성, 요청파라미터의 이름으로 객체의 프로퍼티(set~,get~)를 찾고 setter를 호출해서 파라미터의 값을 입력(바인딩)한다.

        데이터를 집어넣는것을 바인딩이라고 한다.

    HTTP 요청 메시지 - 단순 텍스트
        HTTP 메시지 바디를 통해 직접 데이터가 넘어오는 경우에는 @RequestParam, @ModelAttribute 사용불가!
        어떻게 전송하고 읽을 수 있나 ???

    HTTP 요청 메시지 - JSON
        JSON 요청 - HTTP 메시지 컨버터 - 객체
        객체 - HTTP 메시지 컨버터 - JSON 응답

    응답 - 정적 리소스, 뷰 템플릿
        스프링(서버)에서 응답,요청 데이터를 만드는 방법은 크게 3가지
        1. 정적 리소스
        2. 뷰 템플릿, 서버 사이드 랜더링하는것, JSP,타임리프같은
        3. HTTP 메시지 사용

        1. 직접 url에 접근, basic/hello-form.html 이라 직접 접근
        2. static은 정적인것 templates은 동적인것 주로 저장
        타임리프 랜더링이 될때 ${}부분이 텍스트부분을 대체해버린다.

    HTTP 응답 - HTTP API, 메시지 바디에 직접 입력
        HTTP API, REST API 라고도 한다.
        3. @ResponseBody + @Controller = @RestController
        api만들때는 jsonV2방식을 많이 사용한다.

        누가 이걸 대신 바꿔주나?
        http 메세지에 있는걸 꺼내서 제이슨을 읽어서 문자열로바꿔주는 과정을 어떻게하는것일까???

    HTTP 메시지 컨버터
        뷰 템플릿으로 html을 생성해서 응답하는것보다 http api처럼 json 데이터를 http메시지 바디에서 직접 읽거나 쓰는경우
        http 메시지 컨버터를 사용하면 편리하다.
        http 메시지 컨버터는 무엇이고 어떤역할???

        jsonconverter, stringconverter가 있어서 맞는 형식에 따라 다르게 작동

        주요한 메시지 컨버터
        1. ByteArrayHttpMessageConverter : byte[]데이터를 처리
        아무 미디어타입 다 받는다.
        2. StringHttpMessageConverter : 문자열데이터를 처리
        String 처리, 아무 미디어타입 다 받는다
        3. MappingJackson2HttpMessageConverter : 객체데이터를 처리
        객체 또는 HashMap, application/json 미디어타입만 받는다

        예시1)
        content-type: application/json

        @RequestMapping
        void hello(@RequestBody String data) {}

        이 경우에는 2번 컨버터가 작동! String으로 값이 넘어오니까 그리고 application/json을 받아줄 수 있으니까 작동 가능

        예시2)
        content-type: application/json

        @RequestMapping
        void hello(@RequestBody HelloData data) {}

        객체니까 3번 컨버터 성립!

        예시3)
        content-type: text/html

        @RequestMapping
        void hello(@RequestBody HelloData data) {}

        얘는 그냥 탈락! 객체여서 1,2번 처리 불가능한데 미디어타입(컨텐트타입)도 application/json이 아니니까 그러면 누가 어떻게 처리해???

        메시지 컨버터는 어디서 작동해???

    요청 매핑 핸들러 어뎁터 구조
        @Controller 처리해주는것!

        핸들러 어댑터에서 http 메시지 컨버터 작동한다.

        동작 방식
        1. 핸들러 어댑터가 호출된다. 그러면 컨트롤러를 호출해주어야 하는데, 그때마다 ArgumentResolver가 많은 파라미터를 처리해준다.
        즉, RequestMappingHandlerAdaptor는 ArgumentResolver를 사용해서 파라미터를 처리해준다.
        ArgumentResolver를 컨트롤러가 필요로하는 매개변수들을 처리한다. 처리한다는것은 필요한값들을 구해온다는 뜻이다.
         파라미터값이 모두 준비되면 그때 컨트롤러를 호출해서 실행시킨다.
        2. 핸들러 어댑터가 실제 컨트롤러를 호출(ArgumentResolver를 통해서 얻어온 파라미터를 넣어준다)
        3. ReturnValueHandler가 반환값을 돌려준다. (여기서 컨버팅 작업을 다 해준다.)

        아직도 http 메시지 컨버터가 나오지 않았는데

        http메시지 컨버터는 ArgumentResolver, ReturnValueHandler에서 모두 사용된다.
        RequestResponseBodyMethodProcessor가 있다 (인코딩, 디코딩 다 처리가능)

        모두 인터페이스로 제공된다. 즉 확장에 대비해서 설계되어있다.

        스프링은 확장 포인트를 아는것이 중요!

    정리
        로깅에는 SLF4J와 Logback 사용, SLF4J는 인터페이스, Logback은 구현체
        @SLF4J 애너테이션 써도 무난하다.
        로그 사용이 프린트문 찍는것 보다 훨씬 성능상 좋다.

        요청 매핑은 contenttype으로도 매핑가능,

        헤더관련 조회가능

        HTTP 요청 데이터 조회하는 방법은 3가지
            GET 쿼리파라미터
            POST HTML Form
            이 위에 2가지는 항상 request.getParameter()로 똑같이 처리가능
            HTTP Message API
            얘는 메시지 컨버터 사용

        @RequestParam은 변수명 같으면 생략가능~

        @ModelAttribute도 생략가능 한번에 객체로 딱 넣어줄 수 있다.

        생략할시 원시타입은 @RequestParam으로 나머지는 @ModelAttribute로 인식한다

        @RequestBody로 반환하면 메세지에 바로 들어간다. 이 사이에서 메시지 컨버터 작동

        json같은 경우에도 원래는 objectvalue가지고 직접 변환해줘야 했지만 @Requestbody넣으면 jsonMessageConverter가 동작하면서 자동으로 처리해준다.

        @RequestBody는 생략 불가능 -> @ModelAttribute로 인식한다. 생략되었는데 객체니까

         응답 데이터도 3개
             정적리소스 응답
             뷰템플릿 사용해서 응답
             메세지만들어서 응답

         요청 매핑 핸들러 어뎁터 RequestMappingHandlerAdapter에 있다.

